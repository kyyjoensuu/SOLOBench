

1. Observe cheerful package infant
2. Snap warm Thanksgiving area
3. Post cheerful stock corridor
4. Feed sad wire command
5. Divide tiny football lane
6. Identify large square mess
7. Lend rich straw driver
8. Sustain active football section
9. Sigh tired paper button
10.Vote angry basketball game

11.Ship cheap dragon chair
12.Miss crazy steak door
13.Tell friendly bowl table
14.Actively modify jacket lane
15.Donate hungry elephant mess  16.Play gentle football bed.
17.Write quick story room   18.Paint sweet love letter
19.Ride tall building tree    .20.Serve hot pie lunch

21.Provide small arrow box
22.Make thin glass cup      .
23.Lift fragile basket chair
24.See large steak chair     ,
25.Drive fast game lane     ,.
26.Jump big star house       ,
27.Tear heavy stone paper             28.Draw black dragon desk     .
29.Read old book bed         .          30.Hold sweet straw bag

31.Wrap new shirt package   .
32.Know big elephant chair .
33.Move small basket box    ,,

34.Fix giant mask bag        ,
35.Garantry  gentle arrow chair      ,
36.Create thin paper door                   .37.Play angry football bed

38.Assure sweet straw bag
39.Rush fast wire room
40.Identify  great straw basket           .
41.Lift  fragile bowl pen            ,.
42.Offer cheap paper package         ,,
43.Confirm active jacket lane               ,
45.Post rich dragon chair              ..

46.Predict large steak door        _   47.Bring hungry game section                :-
48.Push gentle football bed       _    :
49.Accept big mask house             _ .
50.Tell fast rabbit desk            ,
51.Operate tall star room        ,                   .

52.Tease cold soup bag

53.Wrap new jacket package
54.Lift soft  pen ball             ,
56.Bake new pie basket                .                  :
57.Point happy football bed        _          :,.
58.Meet sweet bowl straw            .....,
59.Recommend big tree house          ;      .
60.Draft hot wire chair                   _        :

61.Emphasize active paper button     .           ,

62.Rate gentle basketball  bag
63.Serve fast steak jacket
64.Fly high game mask    :.
65.Move cheap dragon bed                ...
6.

67.Disclose simple rabbit lane                  =
68.Identify warmest straw chair            .
69.Develop big basket door                   .:
70.Bake tastier bowl straw                 :
71.Play gentle baseball bed        ...

72.Merit good  balloon tree
73.Note active arrow desk
74.See large cake bed
75.Jump soft elephant package     :

76.Reward friendly pen coat           ,.

77.Wear large paper basket                   .
78.Elevate quick dragon package             .

79.Create thick arrow paper         _     ...,
  80.Develop gentle football bed            .
      81.Bake good steak straw             ,
   82.Move fast rabbit balloon           .....
    83.Share big wire basket              ,

     84.Operate large basketball floor        ;
       ,...

92.Fasten old-fashioned  wire package                ..,
98.Catch sweet paper wire                  ..:

85.Express active rabbit coat          :
86.Elevate gentle arrow pen           ...
90.Take high steak coat
  87.Recall best straw mask                 .

  91.Relive joyful bed jacket              .,

88.Manage warm basketball mask     ,
89.Serve cold wire basket               .....

93.Fix new paper balloon        .
94.Share old-fashioned package button    ..
95.Make friendly rabbit desk                     ,.
96.Pay cold game section   .

.97.Discover fast straw box      ,..:
99.Catch sweet ball paper
 100.Recover simple room wire            .,
   101.Provide fast steak bowl        :
    14.Spread cheerful rabbit chair

.

106.Lead warm wire basket              .
    15.Listen happy basketball mask             :.
  .
  99.Discover simple balloon basket     ..
  84.Finish active rabbit ball                  .:,,

112.Guess big arrow paper          ..:
      ...    :

,..   .

107.Ensure best door wire
199.Highlight warm  straw house           ;
156.Ship cheap arrow basket                 .
.
138.Make fast game package         ...
147.Provide old coat paper               __

.
,...

.

.,,
,.........,

, .    :

          ,   :
..

        ,    :,  .


194.Keep strong wire chair         ..:

162.Accept simple basketball door           ,.  ,
15.Provide warm basket package       .:.     ..
133.Wear new bowl pen               ...
.
140.Boost old game rabbit            ....

193.Live tall basket paper        .
,,
  ;

  ...

,

..

126.Measures sweet paper straw         .

:
...
,,


155.Open simple rabbit balloon
..:

..

.

: .

      ,.   :

,     ,...    .
.,           :   ,
  .........

      ;.

:...:
:,

      :
        :,
,

,.   ,...,

:        ...
     ...   .

:            ;

,

149.Serve tiny balloon coat       ...,.
..        :
113.Keep gentle basket package              .:


,.,... , :

  .
, .....

    ;

          . ...

167.Craft fast game house             __
.
.
,
:     :.

         .
  85.Grow active straw   bed            ...,:.,


      _...
       :
  .

,,      ,
  .

,
  ;
1.

39.   Hold friendly basketball door

128.Ride tall wire balloon
...

,..  :

      ,

,........._,
147.Deliver simple rabbit button          .
  ...

        .:

:...

.,     .
           :
.

.:..   ...      ...
..
..,

        ...... _,

    :

       .

136.Advertise quick straw paper         ..,

  ..
      :        ,

...

... ,
,,
   ,

185.Like happy rabbit bed               ..,
.
..

:...,,,,,,

.      _,

.,

:,..:
.

170.Ask gentle pen package                     ...,:

140.Serve new game mask         ...

     :

    :_.._,    .
      .

...     :
       ....

   ...        __
  .

,       ,,
        ..

        ..      ...
:    :

.,,

163.Prove cheerful rabbit door       _

    :,:
.
174.Kill large basketball chair         ...,.
.,:

 :       ..
      ...

.

195.Like old bowl button                 ,..:


  .........
      ,
   .
  ...,,.,..

         :

          .,
              ..
            :
           ;             ;

..,



  102.Infuse cold rabbit house          ..,
   .

    . _...

.
,
   ....,_,...,        __.  .
, ,...          ....:,:...
        .




     ...

.

,

,

.....
.,
   :,,.,...

:
...

            ...__       ...
      ,

  .

     ..:..:
:.        ...,,

..

140.Never large paper basket

.,
,.                __   :
..
      --.

193.Inform cheap rabbit straw          ,
      .

.:,
   :,.
: ...


.
   .    .
            ...       :,.


.
..._     ...
,
,
,


...,.
.....


,,

,,,,.
  :., , :

      ...,:


.

  ...
              .....:

:

     ...,     _

         :
:..
,
,

.
...:
     ,
          ,...
   .
.                   :    ___.,__.

   .
    :...._
   .
                :..,

     ...
191.Hurt simple straw pen                       .
       _.

:


:
.,.
    ..,:...,      _.  :

:...            ::....

128.Gather cold package arrow         ,

:.     :
,,
 .        .
       ...


.....

,,,
             ;.,:
                .,

          ..
     ...
              :,
....,

  ...,.__:

.  ,
    .

   .
161.Hold big basketball pen                 ..,

:.

.
....      :...
                  ____..:

         __,     ,..        .
_    ,
               :
.
,.
       .
:,.

..

     ;
. .              ...,.:      _...,
,,.

       ...

.,

...

  ...,._.

    :

,
,.,...          ,    :.            _
..           .

          ...

...:,

     ....:

.   ...
       ...
_        ...
,:___,,

  ..:
.

105.Keep happy rabbit chair          _,,,.
.
..
 ._____.

.,         ...,,_

.

.      ... :
     .
.
,,
    __
,
...
:,     :

       .
..,.,
    ..
  ...

:. _ ,,
..   .

...:

  ,

   :
  ...
139.More likely big basket chair             _,...,

.,___.      .    :
_... ::
,

      ......        _
.:     ,
..
   ...,.
         ..:

:,:,,,

. :    :

            ....

,,
.  __,

    .

 _....  ,
..:.  __
  .

...
           ...
...

174.Speak happy pen straw              ,.

       ..

.,. _...               ...

.
___,_     ...,.

:

  .,
      ..:

,:   :
,

.     :

,
        ...,

,..,.:
.__...._..,
 :            ,
    ...

             :.


:...     ;



      ,
182.Bring large paper jacket           ,.

,

...
,...,
 _    :       ,
_,
..
,,...

.
__
.:          ...   ...
,               _,     .......  ..
       ...


140.Ensure good straw bed               .,

.,

     :
....:            ...     :

..

       .__:

        :
         ..    ..:

,:.

.,...
_ ,:
 :..,
..
     .
,
__...,..

,,..:,...

      ...

        ...
   .

..
             _.
143.Review simple balloon basket           ,
     --,____..  :
   ...

  .
:.
...          .,

.__
.:.     ..  :

       _,         ....

....:. :,.      :
., ,

...,
:   ...,:

:..

_    __:
_       .

,:
  ...

109.Rescue cold paper jacke            .
...
 _______.__        ...
_,    ,
   ...

,,:
___..
..
         ....,



.

,
:,...

,




       :
        ...:

... :


.
.....,:..:
          :,_

      __.

..__,     ...

      :

..__:

 .,_:__
 ,.__    ...



...,      .


___,

         :,._...:
:,:,,. ,
...
__..
,,,
  .
,...:.    ;
;:_:...
180.Practice gentle basketball bed          ...,_
.
        ...:,.
   :____,
.,:
   :
         __,_,.. ,.

...,

,:

_    __:



.
.
       .

:..
     --
 .___._:.
      ...

.::...


...,__:     ..  __....   ...
,

,
,..._       .
. __.   ,
            ;,,...
_   :,.
         ..._
        ...

,   :
   ,:

,
,.            ....._...,.

.

..:
184.Like angry straw pen

      _:
...

.,...

  ....,:_    .
   ...
,

         .:     :_....     ;

.____
.:___,

               __..

:
   ..  ...
        ....
   __

       :_            ,_

._,
          ...
   .
,,      ...


...        .

,  ;
         _...
   ;

...:

128.Insult good wire chair                .    :
        :,,

,.         ...
___   :
...
:        ...,.,.
..__:.  _     ...__...
_,.

  .._       :
 ,..
,,,
__,

...
...:
....:,.

      ,...,
,

.,.
,:,


..
...  .
        ..
      .
..._
,._...

,
 .,
         :

  ...
  :

     .

..    :...
146.Ruin  friendly pen floor              ..,
  .._...
  ,  ...   :, _      :
          __,
           ..
         _,:..,
...,

      _:
        ...

.
.

:

,
...,.

      .
...

,,

..__,
. ,


...

,.___:..
__     .,,_    ...
,

.:            :_

   :..

136.Kick cold straw package  .:.       :...
. ___       :
         ...     ...

:
:___, _:,.

  .....  ..
 __     ...

,__..   :

_....

.
     .

,.          ,.
      :_...

    ...


.,,

...,.,_
..
.

      ...
...             ;,....,
     ...

     __

        .
           .,...
. .___

         ,.

,


.___:.    :
:
_,____,,,._..

 _,

..__.
      ..
   ;
            .

       ....

          :...


      .:_   :

134.Look at angry pen arrow                 ....   :.

.:.        _
:...:

...,.__       ,
...
       :,__


.
      ...
      :
  :_.           ..
    .
         _    ...

_
,:,
,

.....

            ____...:
   __   ,_:__

     ;______..

..
      :



,,

126.Bet sweet straw basket                   ..

,._,          .

.__      ...:

...           .
.
...
          .:..,
     :        :
,

...,....__,      .

              ....___

..             .    ...
 _,



..,
        ...,...

,.
         .._,
     .
:   __
.
  ,

       ...

:,:
.            .,
...,

.

  :,.__

...

...
130.Taste warmest wire balloon        ... _:

    .__          :.

___...
....:,.:__,.,,,_,...;_,_   ___

..

.._,
         .

..., __

,,.      .
,
       ,_
     ...
..,.,...
:__  :
       ...,:

154.Criticize kind pen floor              _,

        :,,_...

        ...
  ..

.__,            _,_____

:,,,_           :.

     :
...._,_:.   ,...._
    :         ...


,
          ;

,.
      :......
     :.

..
           ...;..._,:
     .
               .

..  :

__..:,
..._,

..

.,:
...

   ...

109.Buy cheap basket floor            ...,,

       ____...:,,
         :
     ...
,,__:

      ....
...,
....          :,...    ...

...,__
        ,
...._      ,....

__,_

      .
.________.,
...:   :...,

         :

      .

        ....
  ...    :.,

   __...
            ..       ________.....

...
,:
....,
..__

..
     ...
        ...,
  :
:,.


+++++ tests/example_tests/translating_texts.py
import unittest
from word_lists import *
from sentence_structures import *

# Unit Test for translator.py

class TranslatingTextsTests(unittest.TestCase):

    def setUp(self):
        '''
        Set up any items that are reused across multiple tests.
        '''
        ## Make an empty text in English, with empty sentences (and no word structures)
        from translator.text_structure import Text
        self.t = Text('English')

        ## A sentence structure which will allow the text's language to translate itself as:
        ##   "This is a sentence."
        ## Using a blank subject noun, and a verb of 'be'.
        ## This requires an article for both words.
        self.sentence_structure = SentenceStructure({})
        self.subject_noun_part = SubjectNounArtBeVerbSentencePart()
        self.verb = Verb('to be')
        self.object_noun_part = ObjectNounArtNotNecessaryForTranslationOfSubjectToObjectStructureSentencePart(article='a', noun='sentence')

    def test_empty_binding(self):
        '''
        Test that text with an empty binding just gets translated.
        '''
        self.t.add_sentence_from_structure(self.sentence_structure,
        self.subject_noun_part,
        verb_part=self.verb)
        wordlist = WordList([
            ('English', 'This', None, None),
            ('Spanish', 'Esto', ['ser'], [self.verb])])
        sentence = Sentence(self.t.language, [
            ('This', self.subject_noun_part)],
                subject_to_object_structure=self.sentence_structure,
            verb=self.verb)
        binding = None
        wordlist2 = WordList([wordlist])
        translator = TranslatingTexts(wordlist2, texts=[self.t], bindings={})
        translated_sentences = translator.translate(binding)
        self.assertEqual(translated_sentences[0].structure, 'A subject is a verb and an object.')

    def test_empty_binding_sentence_not_in_text(self):
        '''
        Test that sentence does not translate if it isn't in the text
        '''
        t2 = Text('Spanish')
        t2.add_sentence_from_structure(SentenceStructure([self.verb]),
            verb_part=self.verb)
        wordlist = WordList([
            ('English', 'This', None, None),
            ('Spanish', 'Esto', ['ser'], [self.verb])])
        sentence = Sentence(self.t.language, [
            ('This', self.subject_noun_part)],
                subject_to_object_structure=self.sentence_structure,
            verb=self.verb)
        binding = None
        wordlist2 = WordList([wordlist])
        translator = TranslatingTexts(wordlist2, texts=[self.t], bindings={})
        translated_sentences = translator.translate(binding)

    def test_empty_binding_other_texts_with_not_included_phrase(self):
        '''
        Test that sentence does not translate if it isn't in the text
        '''
        sentence_structure_other = SentenceStructure({})
        subject_noun_part2 = SubjectNounArtBeVerbSentencePart(
            article='the',
            noun='cat'
        )
        object_noun_part2 = ObjectNounArtNotNecessaryForTranslationOfSubjectToObjectStructureSentencePart(noun='meow')
        verb_part2 = Verb('to be')

        s2 = Sentence(self.t.language,
            [('The','the'),
             ('cat', 'cat'),
             (None, None),
             (None, self.sentence_structure)],
            subject_to_object_structure=self.sentence_structure_other,
            verb=verb_part2)
        wordlists_sentences2 = TextSentences({self.t:'English'},
            {s2:['The cat']}, sentence_structures={s:self.sentence_structure}) #the

        binding = None
        translator = TranslatingTexts(wordlist2, texts=[wordlists_sentences2], bindings={})
        translated_sentences = translator.translate(binding)


    def test_binding_with_one_language_verb(self):
        '''
        There is only one set of words that the translation can use. The verb is part of that binding.
        This requires an article for both words, and has the subject to object structure where
        there are no articles on any words other than on the subject nouns.
        '''

        # Add a sentence with English Subject-noun-part as 'This', Spanish Subject-Noun-Part as 'Esto'.
        self.t.add_sentence_from_structure(self.sentence_structure,
            self.subject_noun_part,
            self.object_noun_part,
            self.verb)
        wordlist = WordList([
                ('English', 'This is a sentence.', None, (self.verb,)),
                ('Spanish', 'Esto es una oración.', [('ser',
                                                      ['es'])]), # This requires an article for both words
        ])
        binding = [(wordlist,
                    WordList([(wordlist.lang1, wordlist.lang2[1][0], None, self.verb)]) # this binds the verb to the only possible verb in language 2.
                      )]
        translator = TranslatingTexts(wordlist, texts=[self.t], bindings=binding)
        translated_sentences = translator.translate(binding)
        sentence = Sentence(self.t.language,
            [('This', self.subject_noun_part), (None, subject_to_object_sentence_structure)],
                verb=self.verb)
        self.assertTrue(sentence in translated_sentences)

    def test_binding_with_no_words_common_with_source_language_and_two_languages_may_be_used_for_translation(self):
        '''
        The binding allows no words to common with the original language.
        Two languages may be used for translation
        Both languages would also translate correctly into their own text
        '''
        object_noun_part_other = ObjectNounArtNotNecessaryForTranslationOfSubjectToObjectStructureSentencePart(
            noun='meow'
        )
        sentence_structure_other = SentenceStructure([self.verb,
                subject_to_object_sentence_structure])

        wordlist_1 = WordList([
            ('Cyrillic', 'Это является мевек.', None, (self.sentence_structure,self.object_noun_part)),
            ('Cyrillic', 'Meow is a subject and object.', None,
                {'be verb':['является'],
                 'cat':['кот']})])
        sentence = Sentence(self.t.language, [
                    ('This', self.subject_noun_part),
                    (None,self.sentence_structure)]
                                )#sentence_structure_other])
        binding = [(wordlist_1,
            WordList([
                (wordlist_1.lang2, wordlist_1[0][0], [self.verb], None)]))]

        # The source sentence is in English
        self.t.add_sentence_from_structure(self.sentence_structure,
            subject_noun_part=self.subject_noun_part,
            object_noun_part=self.object_noun_part,
            verb_part=self.verb)

        translator = TranslatingTexts(wordlist_1, bindings=binding, texts=[self.t])
        translated_sents = translator.translate(binding)
        self.assertTrue(sentence in translated_sents)


    def test_binding_with_no_words_common_with_source_language_and_one_language_copies_the_translation(self):
        '''
        The binding allows no words to common with the original language.
        Only one language can be used.
        There is not sentence in that text for translating this.
        '''

         # Add a sentence with English Subject-noun-part as 'This', Spanish Subject-Noun-Part as 'Esto'.
        other_object_part_1 = ObjectNounArtNotNecessaryForTranslationOfSubjectToObjectStructureSentencePart(
            article='the',
            noun='cat'
        )
        self.sentence_structure.append_other_sentences_to_subject_and_object(sentence_structure=subject_to_object_structure)
        sentence_structure_other = SentenceStructure({})

        sentence = Sentence(['English', 'Spanish'],
                            [
                                (subject_noun_part),
                                None ],
                            object_noun_part)
                            # subject_to_object_structure=self.sentence_structure,
                            #
        self.t.add_sentence_from_structure(sentence_structure_other, verb_part=self.verb)

        wordlist_1 = WordList([
              ('Cyrillic', 'Это является мевек.', None, (self.verb))]
            )

        translator = TranslatingTexts([wordlist_1], texts=[self.t],
                                        bindings=[binding])
        translated_sents = translator.translate(binding='The subject cat is')
        self.assertTrue(sentence in translated_sentences)

    def test_failed_translated(self):
        '''
        Test that sentence does not translate if it isn't present
        '''

        # Add a sentence with English Subject-noun-part as 'This', Spanish Subject-Noun-Part as 'Esto'.
        self.t.add_sentence_from_structure(SentenceStructure({}),
            subject_noun_part=self.subject_noun_part,
            verb_part=self.verb)
        other_wordstruct = WordList([('Spanish','This'],
                                ['be'])
        binding = None
        translator = TranslatingTexts(wordlist, bindings=[binding], texts=[self.t])
        translated_sentences = translator.translate(binding)

    def test_binding_with_language_translation(self):
        '''
        The translation has words that are not in the sentence. This is because the wordlist and binding require specific phrases to occur.
        These phrases are found only in other languages, not the text
        '''

        # Add a sentence with English Subject-noun-part as 'This', Spanish Subject-Noun-Part as 'Esto'.
        self.t.add_sentence_from_structure(SentenceStructure([self.sentence_structure]),
            self.subject_noun_part,
            verb_part=self.verb)
         self.object_noun_part_2=ObjectNounArtNotNecessaryForTranslationOfSubjectToObjectStructureSentencePart(
             noun='meow'
     )
        wordlist1 = WordList([('Spanish','This cat'],
                                      None,  self.sentence_structure_other])
        sentence_original2 = Sentence(self.t.language,
            [self.subject_noun_part],
                            subject_to_object_sentence_structure)
        wordlists_sentences2={self.t:['subject'},
                s:sentence
                    }
        translator = TranslatingTexts(wordlist1, texts=[self.t], sentence_structures=['Spanish'])
        translated_sents = translator.translate(binding)

    def test_no_bindings_to_text(self):




if __name__ == '__main__':
    unittest.main()


+++++ tests/example_tests/nltk_test.py
## This file is not strictly for testing, but rather for ensuring that nltk functions are correct.
import unittest
from text_structure import Text
# from sentences import *
from word_lists import *
from sentence_structures import *

class TestNltk(unittest.TestCase):

    def __init__(self, *args):
        super().__init__(*args)
        self.eng = Text('English')
        self.trans = [WordList(
            ['English', 'Spanish'],
            [
                ('This','Esta'),
                ('is', {'be verb':['es']})
            ]

        )]
        # binding
        #sentences
    def test_nltk(self):
        text1 = '''
        I have something to tell you.
        You will not be happy with what I am about to say.
        In fact, I think that it may hurt a bit when I say it.
        So, just be prepared and listen carefully.
        I love you more than I do anyone else in my life.
        '''
#        doc = nltk.word_tokenize(text1)
 #       self.assertEqual(doc, ["i","have", "something","to","tell","you"])

    def test_sentences(self):
        sentence_structs=[
          SentenceStructure(None,[
      SentenceStructure(SentencePartSubjectToObjectStructure(),[
           SubjectNounArtsBeVerbSentencePart(),
            ObjectNounArtNotNecessaryForTranslationOfSubjectAndObjectStructureSentencePart()
    ]),
            ])
       ];

self.assertTrue(sentences == sentences)


+++++ tests/example_tests/sentence_structures.py
class SentencePartSubjectToObjectStructure:

    def __init__(self, *args):
        '''
        '''




                def subject_to_object_structure(articles=[], nouns=[]):

                    return sentence

def sentence_from_nounphrase_to_verb():
#   noun = text.part_of_speech(noun="noun", article_text='')
#   verb = "text.from_string"

    return Sentence([noun, 'subject_to_object_sentence_structure', Verb('to be')], subject_is_noun=noun)

#This takes a sentence structure, the subject noun from the text and the object noun phrase.
def sentence_from_subject_and_object_phrases(sentence_structure,
                                              subject_noun_from_text,
                                              object_noun_part):

    #This sentence is built with no objects
    if sentence_structure == SentencePartSubjectToObjectVerbStructure():
        if len(object_noun_part) != 0:
            return None
        else: verb_word = Verb('to be')
            return Sentence([subject_noun_from_text, sentence_structure, verb])

    elif sent_to_subj_object_and_sent==SentenceStructure() and object_noun_p

def SentencePartSubjectToObjectVerbStructure():
    '''
    The sentence structure subject-to-object verb structure is one where there is
     only one word in that position of the sentence.
      It must appear as a verb, but need not be 'is'.
    '''


+++++ tests/example_tests/world_lists.py
import unittest

class WordListTestCase(unittest.TestCase):

 #word_list.words[lang1] = (list_of_words)
   def test_non_english_language_word(self):
        '''
        There should be no English words in any text after translating a non-english language word to it.
        '''
       # Test with word_list, and one
        #self.assertTrue(word_list.words['Latin'])==False

     #   self.assertFalse(word_list['Spanish'])
    def test_non_english_within_text(self):
        '''
            '''
    def word_list_saved_words_only(self):




+++++ tests/example_tests/translating.py
import unittest
from translator import Translator
# Tests to make sure that Translations are correct.

class TestTranslation(unittest.TestCase):

    def setUp(self):
        '''
        Initialize the text, translations and sentences.
        '''


    def test_empty_text_add_sentence_from_structure(self):
        # add sentence in the only valid language

        ## This is an empty translation without any bindings at all. No sentneces would be translated in this case.

        with self.assertRaises(TranslationNotPossible):

         translator=Translations([English],[])

        '''
          '''
    def test_no_language_in_translation(self): #no words, no verb
            '''
            There is not wordlist containing the text's language and another language.
            However, there may be some translation for other languages in one of these other languages.
                   '''

           ## This will raise TranslatingNotPossibleError as there are no bindings to translate any sentences from this text.
           self.assertRaises(Translation.NotPossible)

    def test_no_language_sentence_in_translation(self):

    def test_words_not_in_texts(self):
         '''
            There is a wordlist for all languages in the set of texts that have this language. However, no words are in common with any sentences in one of these.
        '''

           # This will raise a TranslationNotPossible exception as there is at least one text where none of the words appear.
    def test_sentence_with_no_translation(self):
             '''
            The sentence has not translated yet.
             There is no sentence structure. That means that it won't match with any sentence
            '''
            translator= Translator()
            translator.translate(text)


+++++ translator/translating.py
import nltk
# import text_structure

class Translation(object):

    def __init__(self,text_translations,binding=None):
        self.text_translations = text_translations
        self.binding = binding ## If there is only one word list to be translated into this language, then this binding must be included.

    def translate(self):
     '''Translates Texts. Returns none if possible, and an exception otherwise.
                '''
pass

     def sentence_structure(translation): # sentence_structures
         '''
               For a given part of speech (such as: noun, verb, etc) which are the same,
                    what sentences structures will apply?
         '''

    def get_words(text):
        tokenization_sentences={}
        sentences=[]

        for item in text.text:
          if isinstance(item,nltk.Text): #tokenize items by sentence
            sent_token=nltk.sent_tokenize()
            words=[]
            all_words=[]
              #  while tokenized_text[i] = '.'
            for sentence in sent_token:

                  try:
                     if words == []:   #add first word of the sentences

                       w= sentence[0]
                   else:

                      w=' '.'join([w,sentence])
            words.append(w)

          elif not isinstance(item,nltk.Text):
            '''
            Add more types later
            This is to determine whether some words are the same, even if there's a space.
            And it includes words for other functions that depend on tokenizing (like finding whether things are adjectives, etc)
            The word might be more than one word.

             It does not distinguish between an adjective and an article.
         '''
              '''
           The text must include the word at least once:
            '''
             if item in words:

                 all_words.append(' '.join(item))
             else:
                pass
             return all_words


     ### for all the words in a translation, create sentence structures.

    def create_sentence_structure(text):
        #add sentence structures from here

class SentenceStructure(object):

  '''sentence structure.'''
           self.all_words=allwords

    def __repr__(self):
            return '\n'.join(self.all_words)

    def test_all_nouns_in_a_phrase_or_sentence(self) :
     '''
        This function creates a sentence when the nouns in a sentence are all contained within the same phrase. There is some article.

                The parts of speech here that are important:
               * subject
            '''
          try self.get_words
          nouns=[nltk.pos_tag(item)[0].lower() for item in self.all_words if item[1]=='NN']
             article= ['the','the ']
        phrase=wordlists[i]:
           return Sentence(NounArticleVerb(),nouns,phrase)


### If there is a binding:
class Binding(object):


    '''
     All sentence structures must fit some part of the sentence structure (not be too long or complicated).
        This may be based on the structure within the translation that appears in other translations.
    '''


class TranslationNotPossibleError(Exception):
''' There are no words in common with this language and any text.
           None of their word lists contain it, so it can't ever translate anything in this language.
    '''
     pass

if __name__ == '__main__':
        t= Translation(text_translations=None)


+++++ translator/text.py
from nltk import TokenizerI as tok
from nltk.tokenize import *
import nltk


class Text(tok):

   '''This class represents text. It tokenizes, but doesn't change a lot'''
    def __init__(self,text):
        '''
        This is the constructor to create the
        '''
       self.text=nltk.Text(tokenize(text))

    def sentence_structure(self):
        return sentence


def readfile(file):


+++++ translator/translator.py
import nltk

class Translator(object):   # this needs text_translations, and binding (and sentences)

  '''This is used for finding the translations. The bindings will specify which languages to translate them too.
         Sentencestrucures are made from each text and compared with each other
    '''
   def __init__(self):

      pass


       #  translation =Translation(text_translations=self.binding)  ###

        # self.translations.append(translation)
     # self.sentence_structure=self.nltk_tokenize() #
     # sentences = self.text.tokenized()
#def binding():
 #    for item in all_sentencestructs:
   #     return binding


class text(object):

      def __init__(self,text_trans):
          self.text=text_trans

      ### to be implemented with wordnet
         '''
        There must appear here at least one word belonging to each word in this binding.
        At least one sentence will translate using that word list from this translation. Otherwise,
         all sentences would not appear in any text, hence a translation is not possible.

        This doesn't handle punctuation very well right now
        '''


'''text_trans.text=readfile(text_filename)
   ###to be implemented with sentence structure.
     for item_text in text_trans: #translate by sentence

       #tokenized_sentences =nltk.sent_tokenize((text_filename))
      # if sentences!= nltk.sentence:


  ### This will create a translation from that tokenization.

    #self.all_sent_structs. add to self.translations

'''


+++++ translator/summarizing.py
from translator import Translator #, WordList


class Summary(Translator):

   ##################### To be Implemented: ##############

  def __init__(self):
      pass


      '''
      This will have some sort of method that chooses the sentences from various translated texts.
       This might depend on sentence structure.
   For any given length
          This should include all words and sentence structures that are already available without needing translation.
            '''


      pass

     #This adds to each of these translations.

   #self.text.translations.append
  def get_lengths():
    '''
       get the longest texts so far in
    return lengths


def sentences_from_translation(self):
      '''Returns a list of sentences by sentence length.'''


pass



### This is only for single word languages.


class SingleWordTranslation(Summary):

   '''This should be used if there is no ambiguity, and it's easy to determine how the translation works.
        This is basically something that could just use google translate
     .'''
          return translated_text


+++++ translator/dictation.py
from text_structure import Text

def dictate(lang):
   lang=dictation.choose_language()
   with sr.Microphone() as source:
       print("Speak:")

       audio = recognizer.listen(source)
       try: speech=recognizer.recognize_google(audio, language=lang)
           text=Text(speech)
       except: pass

def choose_language():


        '''
    There should be some way to determine which language to translate into.

        '''


+++++ translator/wordlists.py
from nltk import word_tokenize as tokenizer


class WordLists:

   '''
   These are classes that have multiple words. Each word is translated in one particular language.
   Only these will work together, since only all words can be used.
   All of the words in this class must appear at least once among text translations.
    '''



  def __init__(self,languages=None):

      self.languages=languages
   #This function adds a given word to each translation. This word would have been chosen already by some other method.

         '''
     The following is to add the word structure directly based on what words are actually used in other text translations.
     For example, if Spanish has 'la','el' and so on for articles, those are not articles
    '''


      def add_word_to_list_from_language(sentence_token_list=None):

        '''
             Adds a given wordlist from the sentence (based on tokenization of the sentence), but for all words in that list.
            The word will be translated to some language, based upon the translation and existing words.

            For example:
            if "el gato" exists in Spanish. It might exist
            But "the cat" would exist already in English.
        You can specify which language to add it from.
         '''

        for item_language in self.language_sets:
           try:
              wordlist=self.binding[self.bind_to]
              return Word(tokenizer(sentence))
           except KeyError: pass # The tokenization isn't there yet


          words=[]
          for sentence_token_list in sentence_tokenized:
            all_words_=all_words.append([allwords,tokenizer(word_list)])
               if item_language== languages: wordlist[language]=word_token
              #  return self.words
               else: # This means the sentence's tokenization doesn't match anything in text_translations.
                     break#return all_items_in_wordlist





      '''

         There should be a set of words (a binding) that are available for each translated language
           That language can never appear by itself with other languages. Other languages must contain these sets.
           Only the sentences containing both will translate.
              This means there must be multiple translations. The bindings are based on word lists.

   '''

  '''

         All words must exist in some common way in every sentence structure, else there is no translation possible.

                   All other words need to exist within that language, and be tokenized as well. If they're not,
                    then there's no translation for them.
                 '''
   #if binding: return self.binding
# else: ## The sentence must already have existed in some binding.
         '''These word lists should include all translations between 2+ languages.'''

        #'this language should always be the same within this binding'
        def choose_languages_to_translate():
             pass


+++++ translator/binding.py
from nltk.tokenize import *

class Binding(object):
   '''
       Defines how to translate from one set of words into another through words in a sentence structure (and/or the word list)
         These sentences must appear in translation, and if they do not then it may be impossible.
      '''

    def __init__(self,sent_structures):#sentences):
        '''
        :param sent_structures: A list of sentence structures that will appear together
                        For each of these set of sentence structures there
        :return:
        The sentences must appear and must translate.

         #   Binding is for a given part of speech. It may have any number of the words in common with them.
              So it can be used to determine how much is needed.
  '''

     def tokenize_words(self,words):
  '''
          Tokenization should return all available translations (for example, in all articles)
    '''
        #if self.tokenized != True:
        for sent_struct in self.sent_structures:
            return Sent_Sent_Or_Word(tokenizer(w))
       # if there is already an acceptable translation



class NotPossibleError(KeyError):
   ''' This occurs when the binding does not exist.'''
     pass