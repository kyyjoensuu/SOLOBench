.  

In Python, your solution must be as simple as possible and efficient. It should have time complexity < O(1), space complexity < O(N) where N is the length of the word list and < O(N^2). You may assume that words in the word list are in lowercase and separated by whitespaces.

Example
word_list:
('the', 'quick', 'brown', 'fox')

Sentence1 = "The quick brown fox jumps over the lazy dog."
words_and, words:
words = ['dog', 'fox', 'foxes', 'foxed', 'the']
for i in range(len(word_list) - 2):
    temp, word1 = words[i], words[i + 1]
    if temp == "fox":
        words.append(word1)
print('Sentence', sentences[i])

The quick brown fox jumps over the lazy dog. 3 'Foxes'
The quick brown fox jumps over the lazy dog.'  
sentence1   sentence22           sentence4

Note: Your solution is expected to pass all test cases. If your code fails any test case, please consider to answer this testcase with the appropriate explanation, rather than a failure summary.

def count_word_pairs(wlt):
word_list = wlt
"""count of word pairs for every two words in the list."""
n = len(word_list) - 2//2
return n * ((n - 1) * (n - 2) / 2) // -(n - 3)


"""count of word pairs for every two words in the list."""
word_list = wlt
"""
count of word pairs for every two words in the list. If word_list contains n elements, count of possible 2-item pairs will be (n*n-1)/2
"""
# The above calculation gives me too many cases and time limit exceeded. Here is the solution to correct this case as given in testcases:
def count_word_pair(wlt):
    sorted_wlt = sorted(wlt)  #sorted makes the process of counting words faster
    #We sort wlt for comparison purposes but does not affect correctness. We need to ensure that wlt is already sorted here.
    word_count = 0
    total_pair_count = len(sorted_wlt[-2:])//2  #2nd element of the sorted wlt is the one that will be matched to every other elemnt in the unsorted array. For example, let array equal wordlist with three elements in it 'f', 'g' and 'h'. In the above sorted list we can see that this pair has a count of only 1. In unsorted ordered list such as the following [g, f, h] there exists a count of two such pairs: {g,f} and {f,h}. Therefore to calculate count of all possible pairs
    # We have to select first two element from sorted wordlist.
    for w in sorted_wlt[:2]:  # Note that the order does matter here. It matters whether we are selecting elements from both sides (if it's both then its double counted) or left side or right
        total_pairs += sum([(w, word[i]) for i in range(len(word)) if not i%2])
    # Remember that we use wlt array as reference value here.
    return total_pair_count and sorted("f", end=';') and sorted("g", end=';') and sorted("h", end=';')

'''Count of word pairs using itertools.groupby'''
from itertools import groupby
def count_bygrouping(wlt):
    word = sorted(wlt, key=str)
    return sum([len(g) for g in groupby(word)])

if __name__=='__main__':
    testcases=[('the', 'quick brown fox'], count_word_pairs({'quick brown fox'}),'fast'),
    ('foxes', count_word_pairs={'f', 'g', 'h'},'slow'),
    ('dog lazy', count_word_pairs({'dog': 'lazy'...'),'more slow'),
    ('blue','orange')],
    print(count_bygrouping([('hello','world'))] #using itertools.groupby'''
import sys
inputlist=sys.stdin.readlines()
result=[]
for line in inputlist:
    wordlist=line.split()
    if len(list(wordlist))==1:
        print(count_bygroupping([wordlist]))#using itertools.groupby'''
    elif ':' in wordlist:
            for word,word2 in zip(wordlist[0],wordlist[1:]):
                result.append(count_bygrouping([word, word2]))
                if(' ' not in word or str(len(word))!=1+4*str(len(word)):
                    print('[ ']+'\t'+'\n'+'{:11}'.format('\t'.join(result[1] for i in range(10)))+str(
                        float(count_bygrouping(tuple(wordlist)[::2]))))#using itertools.groupby'''
    else:
            print('[ '] + '*'.join([count_bygroupping(['**'.join(sorted(x)) for x in x].split('=') for i in range(8*len(wordlist[1:])]))+str(f'{float:15.2e}'))        #using numpy
    print(result)+str(float(count_bygrouping(tuple(wordlist)))))  	if __name__=='__main__':
        sys.stdin=open('input.txt')
        while True:
            wordlist=inputlist[0].strip().split()
            if len(wordlist)>1:
                break
    for line in inputlist[1:-1]:
        wlt=line.strip().split()
        print(wlt)
    


Q: Why is the function count_bygroupping called by itertools.groupby?  
A: I have no idea why a word pair has to be grouped. Maybe it has to be so that it can handle both ordered pairs and unordered ones. As such, I've used the itertools.groupby package in my solution. 
"""
    from itertools import groupby
def count_word_pair(wlt):
    #sort the word list first to make the process of counting words faster. This doesn't affect correctness.
    sorted_wlt = sorted(wlt)  #sorted makes the process of counting words faster
    
    #we sort wlt for comparison purposes but does not affect correctness. We need to ensure that wlt is already sorted here.
    word_count = 0
    total_pair_count = len(sorted_wlt[:2])//2  #2nd element of the sorted wlt is the one that will be matched to every other elemnt in the unsorted array. For example, if the array equal wordlist with three elements in it 'f', 'g' and 'h'. In the above sorted list we can see that this pair has a count of only 1. If you look closely at the second last character in each pair (the one that is not part of the sorting operation) all they have is an empty string, or no string at all. Therefore to calculate count of all pairs
    # We have to select first two elements from sorted wordlist.
    for w in [sorted_wlt[:2]]:  # Note that the order does matter here. It matters whether we are selecting elements from both sides (if it's both then its double counted) or left side or right side. For example, let array equal wordlist with three elements in it 'f', 'g' and 'h'. In the above sorted list we can see that this pair has a count of only 1. If you look closely at the second last character in each pair (the one that is not part of the sorting operation) all they have is an empty string, or no string at all. Therefore to calculate count of all pairs
    # We have to select first two elements from sorted wordlist.
    for w1 in [sorted_wlt[:2]]:  # Note that this doesn't change the order. This means that we can only loop through two elements here and then there is no need to go through the unsorted words as well. Note also that here is just one possibility when we select first two element from sorted wordlist. So this will be double counted.
        total_pairs += sum([(w, w1) for i in range(len(word)) if not i%2])   #For any two of the three elements taken out of the sorting function we'll find at least one combination of left and right that can form a pair in a given array. If any of these combinations are equal then it will be a duplicate as you will notice from the example given.
    # Remember that we use wlt array as reference value here.
    return total_pairs

"""count of word pairs using itertools.groupby
The count function for word pairs gets called for each set like this:
(s1, s2) => w[0].sort() and w1.sort(), where s is sorted but not 1.1.13 etc. The result of this will be a list of tuples as follows:
[(w1, s1), (w2, s2), ..., (w[i], s[i])] that will get converted to the following list of pairs: [(w1, s1), (w2, s2), ...] because the last w is the first s.
Therefore it follows that this line needs more space than what's allowed so I wrote sum([() for i in range(len(s))]) to get all possible combinations of tuple
The count function will have to do this for each element in sorted list and return its total number. This is a very long method, but it gets a bit clearer with some explanation:
1. We sort the word lists (sort them) because we're looking at 2 elements from both sides, meaning that the count of all possible pairs needs to be computed for every set on the way down the word list. If you can think why the tuple will be converted into a pair but it's in this order, try to understand that. This sorting function is also important because our output list will have 1+n tuples here n being number of elements in sorted list.
2. () => [] because this count function is counting all values except from () as for 2 element set we don't need any tuple, hence count function is adding the sum of value(s) that we don't want to keep with empty tuple for those values, i.e., in our case sum([]).
3. The rest of the lines are where you use a list comprehension line to build your desired pairs. There is no limit here as compared to the [() for i in range(len(s))] part and all possible combinations will be included, so why did I write it as such? This way I can understand that the code is adding all values at once that we want into a list {a,b}.
"""count_word_pair('hfhfgfdgdddg') #should return 2*3*...3*6 instead of 1+6 which doesn't make sense
print(count_word_pair())  #should return 7 (10 for a * 3 for b, then add up to 1+6 {hfhfghfgfdggdhdg})
"""count_word_pair("aabbcccdefggd") #should give back 9. The number for "b" is *3 because we can have abbb, abcbe, and the like (and they will be treated as the same) but that counts also one extra pair {b}, so the final answer is 9  
"""count_word_pair('hffhhgge') should return back the value 2 which isn't because we need to consider it all by adding up its count(s), since it consists of two values for every character: 1 value for h; 0 for ff; 0 for hh. And we are only interested in counting one pair for each one, i.e., {h,ff}, so we multiply sum to get the desired result.
"""count_word_pair('hhh') return 3 which is because we can have h,ff, and hh. Then why does it show a value of 2? That comes when we consider all possible combinations; here that means {h,ff}. So sum(2) will give us the number of pairs in which all three characters will have no values at all:
1*(value(h)*3)+1*(value(ff)*3)+1*(value(hh)*2) = 7*1+7*0+2*1.
"""count_word_pair('f') return 6 which is because we can have h,ff, hh, fh, ff, and f. And the value of {f} is 6 times: 0 for ff; 1 for hh; 2 for fh. So in total that makes 2*3*1+3*2*0 = 6
Please try to understand how this function works at least now, otherwise I won't be able to answer the following question:
How many distinct pairs of letters can you form from the word 'elephant', where in no case all three consonants will have values.
A : In this case it is different for every letter because we never get a triplet when using the other two letters; therefore, there are four separate cases to consider here as follows: a) aa: one value each for a and h; b) ab: two distinct values for a and d; c) ac: three distinct values for a, c, and e; and d) bc: three distinct values for b and c. And finally the total number of possible distinct pairs can be calculated as sum(5*4*(6-1*1+4+6-2*0+3*0)) = 824.