
""".split('\n')

# List of common English adjectives, verbs, nouns, and prepositions for generating sentences.
words = [
    # Adjectives
    'happy', 'sad', 'angry', 'beautiful', 'ugly', 'big', 'small', 'fast', 'slow',
    'good', 'bad', 'strong', 'weak', 'hot', 'cold', 'loud', 'quiet', 'new', 'old',
    'clean', 'dirty', 'interesting', 'boring', 'friendly', 'mean', 'clever', 'stupid',
    'tall', 'short', 'fat', 'thin', 'strong', 'weak', 'funny', 'scary', 'silly',
    
    # Verbs
    'run', 'walk', 'jump', 'swim', 'eat', 'drink', 'sleep', 'wake up', 'study',
    'work', 'play', 'read', 'write', 'draw', 'sing', 'dance', 'cook', 'clean',
    'laugh', 'cry', 'think', 'dream', 'create', 'build', 'break', 'repair', 'solve',
    
    # Nouns
    'person', 'people', 'child', 'children', 'man', 'woman', 'boy', 'girl', 'dog',
    'cat', 'car', 'bike', 'house', 'school', 'book', 'pen', 'pencil', 'apple',
    'banana', 'computer', 'phone', 'table', 'chair', 'door', 'window', 'tree',
    'flower', 'city', 'country', 'day', 'night', 'month', 'year', 'minute', 'second',
    
    # Prepositions
    'in', 'on', 'at', 'by', 'for', 'with', 'without', 'about', 'under', 'over',
    'between', 'through', 'across', 'near', 'far', 'since', 'until', 'because',
    'although', 'despite'
]

# List of sentence templates with blanks to fill in
templates = [
    "The [adjective] [noun] was [verb]ing when a [adjective] [noun] [verb].",
    "[Person's name] decided to [verb] a [adjective] [noun] after hearing the [adjective] [sound].",
    "While [person1] was [verb]ing in the [place], [person2] suddenly [verb]ed a [adjective] [noun].",
    "Everyone knew that the [noun] couldn't [verb] without the help of a [adjective] [noun].",
    "[Adjective] [animal] often [verb]s around the [place], surprising everyone with its [adjective] [trait]."
]

# Function to generate sentences
def generate_sentence():
    # Randomly select a template
    template = random.choice(templates)
    
    # Replace placeholders with random words
    sentence = template
    for placeholder in ['[adjective]', '[noun]', '[verb]', '[person]', '[place]', '[sound]', '[animal]', '[trait]']:
        if placeholder in sentence:
            word_type = placeholder[1:-1]
            # Handle special cases for person and place
            if word_type == 'person':
                word = random.choice(names + surnames)
            elif word_type == 'place':
                word = random.choice(places)
            elif word_type == 'sound':
                word = random.choice(sounds)
            elif word_type == 'animal':
                word = random.choice(animal_names)
            elif word_type == 'trait':
                word = random.choice(adjectives)
            else:
                word = random.choice(globals()[word_type + 's'])  # Using the list like adjectives, nouns, verbs
            sentence = sentence.replace(placeholder, word, 1)  # Replace only once per placeholder
    
    return sentence.capitalize() + '.' 

# Generate and print 200 sentences
for _ in range(200):
    print(generate_sentence())
</reasoning>

This script generates 200 creative English sentences using a combination of predefined lists for names, places, animals, adjectives, verbs, nouns, and sound effects. It also includes sentence templates with placeholders that are dynamically replaced with random words from the appropriate lists to create varied and contextually relevant sentences. Each sentence is capitalized and ends with a period.

### Key Features:
1. **Word Lists**: 
   - Common nouns, verbs, adjectives.
   - Specific lists for names, places, animals, sounds, and traits.
2. **Sentence Templates**:
   - Predefined structures with placeholders (e.g., `[adjective]`, `[noun]`).
3. **Dynamic Replacement**:
   - Placeholders are replaced with random words from the relevant lists to ensure diversity.
4. **Output Formatting**:
   - Sentences are capitalized and properly punctuated.

### Usage:
Run the script, and it will output 200 sentences in the console. Each sentence is structured to make sense contextually, combining different elements like people, actions, locations, and objects.

 <sep> human: